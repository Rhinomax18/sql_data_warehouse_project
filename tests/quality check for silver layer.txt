*/
========================================================

FOR crm_sales_details:-

========================================================
/*

-- Check that the table [crm_product_info] is not having a problem joining with the sls_cst_info.

SELECT  [sls_order_num]
      ,[sls_prd_key]
      ,[sls_cst_id]
      ,[sls_order_date]
      ,[sls_ship_date]
      ,[sls_due_date]
      ,[sls_sales]
      ,[sls_quantity]
      ,[sls_price]
  FROM [DataWarehouse].[Bronze].[crm_sales_details]
  WHERE sls_prd_key NOT IN (SELECT prd_key FROM Silver.crm_product_info)


  -- Check that the table [crm_customer_info] is not having a problem joining with the sls_cst_info.

  SELECT  [sls_order_num]
      ,[sls_prd_key]
      ,[sls_cst_id]
      ,[sls_order_date]
      ,[sls_ship_date]
      ,[sls_due_date]
      ,[sls_sales]
      ,[sls_quantity]
      ,[sls_price]
  FROM [DataWarehouse].[Bronze].[crm_sales_details]
  WHERE sls_cst_id  NOT IN (SELECT cst_id FROM Silver.crm_customer_info)

  -- Check for any Invalid DATE for sls_order_date

  SELECT NULLIF(sls_order_date , 0) sls_order_date FROM Bronze.crm_sales_details WHERE sls_order_date <=  0 OR LEN(sls_order_date) !=8

  -- Check for any Invalid DATE Order

  SELECT * FROM Bronze.crm_sales_details WHERE sls_order_date > sls_ship_date OR sls_order_date > sls_due_date


  -- Check NULLs or Negative or Zeroes in Sales, quantity and price

  SELECT sls_sales FROM Bronze.crm_sales_details WHERE sls_sales IS NULL OR  sls_sales <= 0  --Issue FOUND (NULLs , Negative , Zeroes)
   SELECT sls_quantity FROM Bronze.crm_sales_details WHERE sls_quantity IS NULL OR  sls_quantity <= 0 -- No Issue
    SELECT sls_price FROM Bronze.crm_sales_details WHERE sls_price IS NULL OR  sls_price <= 0   --Issue FOUND (NULLs , Zeroes)
    -- OR
    SELECT sls_sales, sls_quantity, sls_price FROM Silver.crm_sales_details 
    WHERE sls_sales != sls_quantity * sls_price OR
          sls_price IS NULL OR  sls_price <= 0 OR
          sls_sales IS NULL OR  sls_sales <= 0
    ORDER BY sls_sales, sls_quantity, sls_price

-- Check that Sales = Quantity * Price

SELECT * FROM Bronze.crm_sales_details WHERE sls_sales != sls_quantity * sls_price



--Change the DATA TYPE of the Silver.crm_sales_details:-

IF OBJECT_ID('Silver.crm_sales_details' , 'U') IS NOT NULL
    DROP TABLE Silver.crm_sales_details;
    CREATE TABLE Silver.crm_sales_details (
            sls_order_num nvarchar(50),
            sls_prd_key nvarchar(50),
            sls_cst_id INT,
            sls_order_date DATE,
            sls_ship_date DATE,
            sls_due_date DATE,
            sls_sales INT,
            sls_quantity INT,
            sls_price INT,
            sls_create_date DATETIME2 DEFAULT GETDATE()
                                        )


*/
========================================================

FOR crm_product_info:-

========================================================
/*


-- Check for Duplicates or NULLs in crm_product_info

SELECT
	prd_id, COUNT(*)
FROM Bronze.crm_product_info
GROUP BY prd_id
HAVING COUNT(*) > 1

-- Check the data NOT IN the erp_px_cat_g1v2

SELECT [prd_id]
      ,[prd_key]
      ,REPLACE(SUBSTRING(prd_key,1,5), '-', '_') as cat_id
      ,SUBSTRING(prd_key,7,LEN(prd_key)) AS prd_key
      ,[prd_name]
      ,[prd_cost]
      ,[prd_line]
      ,[prd_start_date]
      ,[prd_end_date]
  FROM [DataWarehouse].[Bronze].[crm_product_info]
  WHERE REPLACE(SUBSTRING(prd_key,1,5), '-', '_') NOT IN 
  (SELECT cst_id from Bronze.erp_px_cat_g1v2)


  -- Check the Data NOT IN the crm_sales_details

  SELECT [prd_id]
      ,[prd_key]
      ,REPLACE(SUBSTRING(prd_key,1,5), '-', '_') as cat_id
      ,SUBSTRING(prd_key,7,LEN(prd_key)) AS prd_key
      ,[prd_name]
      ,[prd_cost]
      ,[prd_line]
      ,[prd_start_date]
      ,[prd_end_date]
  FROM [DataWarehouse].[Bronze].[crm_product_info]
  WHERE SUBSTRING(prd_key,7,LEN(prd_key)) IN 
  (SELECT sls_prd_key from Bronze.crm_sales_details)




  -- Check for Unwanted Spaces
  -- Expection: No Result

  SELECT
        prd_name,
        TRIM(prd_name),
        LEN(prd_name),
        LEN(TRIM(prd_name))
  FROM Bronze.crm_product_info
 -- WHERE LEN(prd_name) != LEN(TRIM(prd_name))


 -- Check for NULLs or Negative Numbers
 -- Expecion: No Results

 SELECT
        *
 FROM Bronze.crm_product_info
 WHERE prd_cost IS NULL OR prd_cost < 0


 -- Data Standerdization & Consistency
 SELECT DISTINCT prd_line FROM Bronze.crm_product_info


 -- Check for Invalid Date Orders
 SELECT * FROM Bronze.crm_product_info 
 WHERE prd_end_date < prd_start_date

 -- FROM the above CASE we will use LEAD(prd_start_date) which will be replaced by prd_end_date (Data Enrichment)

 SELECT prd_key,prd_start_date, CAST(LEAD(prd_start_date) OVER(PARTITION BY prd_key ORDER BY prd_start_date) - 1 AS DATE) as prd_end_date from Bronze.crm_product_info 



 -- Change the DATETIME --> DATE

 IF OBJECT_ID('silver.crm_product_info', 'U') IS NOT NULL
DROP TABLE silver.crm_product_info;
create table silver.crm_product_info (
		prd_id INT,
        cat_id NVARCHAR(50),
		prd_key NVARCHAR(50),
		prd_name NVARCHAR(50),
		prd_cost INT,
		prd_line NVARCHAR(50),
		prd_start_date DATE,
		prd_end_date DATE,
		dwh_create_date DATETIME2 DEFAULT GETDATE()
);





*/
========================================================

FOR crm_customer_info:-

========================================================
/*


-- Check for NULLs or Duplicates in the primary key

SELECT cst_id, COUNT(*) FROM Bronze.crm_customer_info GROUP BY cst_id HAVING COUNT(*) > 1 OR cst_id IS NULL

-- Use Rank functions to find the latest cst_id in the table

SELECT * FROM (
		SELECT
		*, ROW_NUMBER() OVER(PARTITION BY cst_id ORDER BY cst_create_date desc) FLAG
		FROM Bronze.crm_customer_info
		WHERE cst_id IS NOT NULL
)T
WHERE FLAG != 1

-- Check for Unwanted Spaces

SELECT
cst_fn
FROM Bronze.crm_customer_info
WHERE LEN(cst_fn) != LEN(TRIM(cst_fn))

SELECT
cst_ln
FROM Bronze.crm_customer_info
WHERE LEN(cst_ln) != LEN(TRIM(cst_ln))



*/
========================================================

FOR erp_cust_az12:-

========================================================
/*


-- Abstarct the cst_id for crm_customer_info

SELECT 
CASE WHEN cst_id LIKE 'NAS%' THEN SUBSTRING(cst_id,4,LEN(cst_id))
	 ELSE cst_id
	 END cst_id,
birth_Date,
gender
FROM Bronze.erp_cust_az12 
WHERE CASE WHEN cst_id LIKE 'NAS%' THEN SUBSTRING(cst_id,4,LEN(cst_id))
	  ELSE cst_id
	  END NOT IN (SELECT cst_key FROM Silver.crm_customer_info)


-- Check for INVALID Date:

SELECT 
		birth_Date
from Bronze.erp_cust_az12
WHERE birth_Date > GETDATE() OR birth_Date < '1924-01-01'

-- Check for Unwanted SPACES

SELECT
		gender
FROM Bronze.erp_cust_az12
WHERE gender != TRIM(gender)

SELECT DISTINCT Gender FROM Bronze.erp_cust_az12




*/
========================================================

FOR erp_loc_a101:-

========================================================
/*


-- REPLACE the incorrect with correct as per the DATA INTEGRATION of the Tables.

SELECT
REPLACE(cst_id, '-', '') cst_id, country
FROM Bronze.erp_loc_a101
WHERE REPLACE(cst_id, '-', '') NOT IN (SELECT cst_key FROM Silver.crm_customer_info)

-- Data Standerlization & Consistency

SELECT DISTINCT country, 
CASE WHEN UPPER(TRIM(country)) IN ('USA','US', 'United States') THEN 'USA'
	 WHEN UPPER(TRIM(country)) IN ('DE', 'Germany') THEN 'Germany'
	 WHEN UPPER(TRIM(country)) IN ('', NULL) THEN NULL
	 ELSE TRIM(country)
	 END country
FROM Bronze.erp_loc_a101




*/
========================================================

FOR erp_px_cat_g1v2:-

========================================================
/*

-- Unwanted Spaces 

SELECT 
		category, sub_category, maintenance
FROM Bronze.erp_px_cat_g1v2
WHERE category != TRIM (category) OR sub_category != TRIM(sub_category) OR maintenance != TRIM(maintenance)

-- Data Standerdlization & Consistency

SELECT
		DISTINCT category
FROM Bronze.erp_px_cat_g1v2


SELECT
		DISTINCT sub_category
FROM Bronze.erp_px_cat_g1v2


SELECT
		DISTINCT maintenance
FROM Bronze.erp_px_cat_g1v2
